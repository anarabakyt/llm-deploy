import { apiService } from './api';
import type { User } from '../entities';

// Google OAuth –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const GOOGLE_CLIENT_ID = import.meta.env.VITE_GOOGLE_CLIENT_ID || '';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Google Auth –æ—Ç–≤–µ—Ç–∞
interface GoogleAuthResponse {
  credential: string;
  select_by: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞
interface GoogleJWT {
  sub: string;
  email: string;
  name: string;
  picture?: string;
  iat: number;
  exp: number;
}

class AuthService {
  private isGoogleLoaded = false;

  // –ó–∞–≥—Ä—É–∑–∫–∞ Google Auth —Å–∫—Ä–∏–ø—Ç–∞
  private async loadGoogleAuth(): Promise<void> {
    if (this.isGoogleLoaded) return;

    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = 'https://accounts.google.com/gsi/client';
      script.async = true;
      script.defer = true;
      
      script.onload = () => {
        this.isGoogleLoaded = true;
        resolve();
      };
      
      script.onerror = () => {
        reject(new Error('Failed to load Google Auth script'));
      };
      
      document.head.appendChild(script);
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Auth
  async initializeGoogleAuth(): Promise<void> {
    await this.loadGoogleAuth();
    
    if (typeof window.google !== 'undefined') {
      window.google.accounts.id.initialize({
        client_id: GOOGLE_CLIENT_ID,
        callback: this.handleGoogleAuth.bind(this),
        auto_select: false,
        cancel_on_tap_outside: true,
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Google Auth
  private async handleGoogleAuth(response: GoogleAuthResponse): Promise<void> {
    try {
      const user = await this.authenticateWithGoogle(response.credential);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
      localStorage.setItem('authToken', response.credential);
      localStorage.setItem('user', JSON.stringify(user));
      
      // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      window.dispatchEvent(new CustomEvent('authSuccess', { detail: user }));
    } catch (error) {
      console.error('Google Auth error:', error);
      window.dispatchEvent(new CustomEvent('authError', { detail: error }));
    }
  }

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google
  async authenticateWithGoogle(credential: string): Promise<User> {
    try {
      const user = await apiService.authenticateWithGoogle(credential);
      return user;
    } catch (error) {
      console.error('Authentication failed:', error);
      throw error;
    }
  }

  // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è sub)
  decodeGoogleJWT(token: string): GoogleJWT | null {
    try {
      const base64Url = token.split('.')[1];
      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
      const jsonPayload = decodeURIComponent(
        atob(base64)
          .split('')
          .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
          .join('')
      );
      return JSON.parse(jsonPayload);
    } catch (error) {
      console.error('Failed to decode JWT:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ sub –∏–∑ —Ç–æ–∫–µ–Ω–∞
  getGoogleSub(token: string): string | null {
    const decoded = this.decodeGoogleJWT(token);
    return decoded?.sub || null;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  isAuthenticated(): boolean {
    const token = localStorage.getItem('authToken');
    const user = localStorage.getItem('user');
    return !!(token && user);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCurrentUser(): User | null {
    const userStr = localStorage.getItem('user');
    if (userStr) {
      try {
        return JSON.parse(userStr);
      } catch (error) {
        console.error('Failed to parse user data:', error);
        return null;
      }
    }
    return null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  getToken(): string | null {
    return localStorage.getItem('authToken');
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  logout(): void {
    localStorage.removeItem('authToken');
    localStorage.removeItem('user');
    
    // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    window.dispatchEvent(new CustomEvent('authLogout'));
  }

  // –ó–∞–ø—É—Å–∫ Google Auth (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  async signInWithGoogle(): Promise<void> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser: User = {
      id: 'test_109876543210987654321',
      email: 'test@example.com',
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      avatarUrl: 'https://via.placeholder.com/150/007bff/ffffff?text=T',
    };

    // –ò–º–∏—Ç–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const mockToken = 'mock-jwt-token-for-test_109876543210987654321';

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
    localStorage.setItem('authToken', mockToken);
    localStorage.setItem('user', JSON.stringify(testUser));

    // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    window.dispatchEvent(new CustomEvent('authSuccess', { detail: testUser }));
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', testUser);

    // –ï—Å–ª–∏ Google Auth –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (typeof window.google !== 'undefined' && GOOGLE_CLIENT_ID) {
      console.log('üîê Google Auth –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
      window.google.accounts.id.prompt();
    } else {
      console.log('‚ö†Ô∏è Google Client ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞');
    }
  }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ Window –¥–ª—è Google Auth
declare global {
  interface Window {
    google: {
      accounts: {
        id: {
          initialize: (config: any) => void;
          prompt: () => void;
        };
      };
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
export const authService = new AuthService();
